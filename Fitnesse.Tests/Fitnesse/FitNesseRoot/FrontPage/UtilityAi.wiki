---
Test
---
!include PageBase

Review the following link and recreate their utility ai for the target selection behavior. 
http://apexgametools.com/learn/apex-utility-ai-documentation/apex-utility-ai-target-selection/

!|Fitnesse.Tests.Fixtures.UtilityAI.TargetSelection|
|Is Holding Grenade|Sniper Angle|Gunner Distance|Grenadier Distance|Sniper Distance|Grenadier?|Sniper?|Gunner?|Result?|
|false|89|8|12|1|18|29|52|Gunner|
|true |21|17|2|19|78|51|13|Grenadier|
|true |2|19|10|14|70|56|11|Grenadier|
|false|90|3|14|9|16|21|27|Gunner|
|false|89|9|6|4|24|26|51|Gunner|
|true |10|18|12|2|68|68|12|Grenadier or Sniper|
|false|84|27|26|21|4|4|3|Grenadier|
|true |82|16|28|20|52|10|14|Grenadier|
|false|85|18|20|11|10|19|12|Sniper|
|true |68|27|13|15|67|15|3|Grenadier|
|true |66|14|26|10|54|20|46|Grenadier|

These are the example code snippets which drive this behavior. 

!-
<pre>
public sealed class SetBestAttackTarget : ActionWithOptions<GameObject>
{
    public override void Execute(IAIContext context)
    {
        var c = (ExampleContext)context;
 
        // get all observations from memory
        var observations = c.observations;
        if (observations.Count == 0)
        {
            return;
        }
 
        var best = this.GetBest(context, observations);
        if (best != null)
        {
            // set the attack target through method, property, field or any other way desired
            c.attackTarget = best;
        }
    }
}

public sealed class IsGrenadierHoldingGrenade : OptionScorerBase<GameObject>
{
    [ApexSerialization]
    public float score = 50f;
 
    public override float Score(IAIContext context, GameObject option)
    {
        // Components should normally be cached and not 'get' on every tick, simplified here for tutorial purposes
        var weapon = option.GetComponent<WeaponComponent>();
        if (weapon.IsHoldingGrenade())
        {
            return this.score;
        }
 
        return 0f;
    }
}

public sealed class IsSniperPointingTowardsUs : OptionScorerBase<GameObject>
{
    [ApexSerialization]
    public float score = 40f;
 
    [ApexSerialization]
    public float maxAngle = 30f;
 
    public override float Score(IAIContext context, GameObject option)
    {
        var c = (ExampleContext)context;
 
        // Components should normally be cached and not 'get' on every tick, simplified here for tutorial purposes
        var weapon = option.GetComponent<WeaponComponent>();
 
        if (weapon.IsSniper())
        {
            var angle = Vector3.Angle(option.transform.forward, (c.self.transform.position - option.transform.position));
            if (angle < this.maxAngle)
            {
                return this.score;
            }
        }
 
        return 0f;
    }
}

public sealed class AreWeInMachineGunKillZone : OptionScorerBase<GameObject>
{
    [ApexSerialization]
    public float score = 30f;
 
    [ApexSerialization]
    public float killzoneStart = 5f;
 
    [ApexSerialization]
    public float killZoneEnd = 15f;
 
    public override float Score(IAIContext context, GameObject option)
    {
        var c = (ExampleContext)context;
 
        // Components should normally be cached and not 'get' on every tick, simplified here for tutorial purposes=
        var weapon = option.GetComponent<WeaponComponent>();
        if (weapon.HasMachineGun())
        {
            var distance = (c.self.transform.position - option.transform.position).sqrMagnitude;
            if (distance >= (this.killzoneStart * this.killzoneStart) && distance <= (this.killZoneEnd * this.killZoneEnd))
            {
                return this.score;
            }
        }
 
        return 0f;
    }
}

public sealed class GameObjectProximityScorer : OptionScorerBase<GameObject>
{
    [ApexSerialization]
    public float score = 30f;
 
    [ApexSerialization]
    public float weight = 1f;
 
    public override float Score(IAIContext context, GameObject option)
    {
        var c = (ExampleContext)context;
        var distance = (c.self.transform.position - option.transform.position).magnitude;
        return Mathf.Max(0f, (this.score - distance) * this.weight);
    }
}
</pre>
-!